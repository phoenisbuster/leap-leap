import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
// Add the following line:
apply plugin: 'com.google.gms.google-services'  // Google Services plugin
apply plugin: 'com.google.firebase.crashlytics'
android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId COCOS_APP_ID
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        multiDexEnabled true
        versionCode 1
        versionName COCOS_APP_VERSION
        compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    
                    def module_paths = [project.file("/Applications/CocosCreator/Creator/2.4.6/CocosCreator.app/Contents/Resources/cocos2d-x"),
                                        project.file("/Applications/CocosCreator/Creator/2.4.6/CocosCreator.app/Contents/Resources/cocos2d-x/cocos"),
                                        project.file("/Applications/CocosCreator/Creator/2.4.6/CocosCreator.app/Contents/Resources/cocos2d-x/external")]
										
										
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
						module_paths = [project.file("C:/CocosDashboard_1.0.11/resources/.editors/Creator/2.4.6/resources/cocos2d-x"),
                                        project.file("C:/CocosDashboard_1.0.11/resources/.editors/Creator/2.4.6/resources/cocos2d-x/cocos"),
                                        project.file("C:/CocosDashboard_1.0.11/resources/.editors/Creator/2.4.6/resources/cocos2d-x/external")]
					
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }

                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("portal.keystore")
            storePassword "Abc123!"
            keyAlias "portal"
            keyPassword "Abc123!"
        }
    }

    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", 'res'
        jniLibs.srcDirs "../libs", 'libs'
        manifest.srcFile "AndroidManifest.xml"
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
	
	
    packagingOptions {
        exclude 'META-INF/proguard/okhttp3.pro'
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/merged_assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        def sourceDir = "${buildDir}/../../../../.."

        copy {
            from "${sourceDir}/assets"
            into outputDir.dir('assets')
        }

        copy {
            from "${sourceDir}/src"
            into outputDir.dir('src')
        }

        copy {
            from "${sourceDir}/jsb-adapter"
           into outputDir.dir('jsb-adapter')
        }

        copy {
            from "${sourceDir}/main.js"
            from "${sourceDir}/project.json"
            into outputDir
        }
    }
}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: "/Applications/CocosCreator/Creator/2.4.6/CocosCreator.app/Contents/Resources/cocos2d-x/cocos/platform/android/java/libs", include: ['*.jar'])
    implementation project(':libcocos2dx')
    implementation 'com.squareup.okhttp3:okhttp:3.12.7'
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:26.8.0')

    // Declare the dependencies for the Dynamic Links and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-dynamic-links'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics-ndk:18.2.6'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.6'

    //Zalo
    implementation "me.zalo:sdk-core:+"
    implementation "me.zalo:sdk-auth:+"
    implementation "me.zalo:sdk-openapi:+"

    //Checking Network Status
    implementation 'com.treebo:internetavailabilitychecker:1.0.4'
}
dependencies { compile 'com.google.android.gms:play-services-base:16.1.0' }
dependencies { implementation 'com.facebook.android:facebook-android-sdk:12.1.0' }


//jsb-link\frameworks\runtime-src\proj.android-studio\app